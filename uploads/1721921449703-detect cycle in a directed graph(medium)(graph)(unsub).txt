#include<bits/stdc++.h>
bool cycleFunction(int node , unordered_map<int , bool> &visited , unordered_map<int , bool>& dfsvisited , unordered_map<int , list<int>>& adj){
  visited[node] = true ;
  dfsvisited[node] = true ;
  for(auto neighbour : adj[node]){
    if(!visited[neighbour]){
      bool checkCycle = cycleFunction(neighbour , visited , dfsvisited , adj) ;
      if(checkCycle) return true ;
    }
    else if(dfsvisited[neighbour]) return true ;
  }
  dfsvisited[node] = false ;
  return false ;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.
  //create adjacency list
  unordered_map<int , list<int>> adj ;
  for(int i = 0 ; i < edges.size() ; i++){
    int u = edges[i].first ;
    int v = edges[i].second ;
    //creating mapping
    adj[u].push_back(v) ;
  }
  unordered_map<int , bool> visited ;
  unordered_map<int , bool> dfsvisited ;
  //graph can be disconnected and can be not
  for(int i = 0 ; i < n ; i++){
    if(!visited[i]){
      bool iscycle = cycleFunction(i , visited , dfsvisited , adj);
      if(iscycle) return true ;
    }
  }
  return false ;
}